"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è yupp.ai —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π JSON –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

–£—Å—Ç–∞–Ω–æ–≤–∫–∞:
pip install openai pillow aiohttp

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
export OPENAI_API_KEY="your_key"
python yupp_automation.py
"""

import asyncio
import time
import subprocess
import base64
import json
import os
import re
from typing import Dict, List, Optional, Tuple
from PIL import Image, ImageGrab
import aiohttp
from dataclasses import dataclass

@dataclass
class BrowserAction:
    """–î–µ–π—Å—Ç–≤–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
    action_type: str  # click, type, scroll, navigate, wait, key
    target: str = None  # –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ URL
    value: str = None  # —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞
    coordinates: Tuple[int, int] = None  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–ª–∏–∫–∞
    description: str = ""  # –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

class YuppAutomation:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è yupp.ai"""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.getenv('OPENAI_API_KEY')
        self.api_url = "https://api.openai.com/v1/chat/completions"
        self.model = "gpt-4o"
        
        if not self.api_key:
            raise ValueError("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–ª—é—á.")
        
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏"""
        icons = {
            "INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "WARNING": "‚ö†Ô∏è", 
            "ERROR": "‚ùå", "AI": "ü§ñ", "ACTION": "‚ö°"
        }
        print(f"{icons.get(level, '‚ÑπÔ∏è')} {message}")
    
    async def take_screenshot(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        try:
            screenshot = ImageGrab.grab()
            timestamp = int(time.time() * 1000)  # –ë–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
            path = f"/tmp/yupp_screenshot_{timestamp}.png"
            screenshot.save(path, optimize=True, quality=85)
            self.log(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {path}")
            return path
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}", "ERROR")
            return None
    
    def image_to_base64(self, image_path: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è API
            with Image.open(image_path) as img:
                # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º—É–º 1024px –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
                img.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_path = image_path.replace('.png', '_optimized.png')
                img.save(temp_path, optimize=True, quality=85)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                with open(temp_path, "rb") as f:
                    encoded = base64.b64encode(f.read()).decode('utf-8')
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(temp_path)
                return encoded
                
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", "ERROR")
            return None
    
    def parse_json_response(self, content: str) -> dict:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç AI"""
        try:
            # –ò—â–µ–º JSON –±–ª–æ–∫
            json_start = content.find('{')
            json_end = content.rfind('}') + 1
            
            if json_start == -1 or json_end <= json_start:
                raise ValueError("JSON –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            json_str = content[json_start:json_end]
            
            # –û—á–∏—â–∞–µ–º –æ—Ç —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º
            json_str = re.sub(r'\.{3,}', '', json_str)  # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
            json_str = re.sub(r',\s*}', '}', json_str)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ
            json_str = re.sub(r',\s*]', ']', json_str)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –≤ –º–∞—Å—Å–∏–≤–∞—Ö
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å
            try:
                return json.loads(json_str)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ actions
                actions_match = re.search(r'"actions"\s*:\s*(\[.*?\])', json_str, re.DOTALL)
                if actions_match:
                    actions_json = actions_match.group(1)
                    actions = json.loads(actions_json)
                    return {"actions": actions}
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å actions")
                    
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}", "ERROR")
            return None
    
    async def analyze_screen(self, command: str, screenshot_path: str) -> List[BrowserAction]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            image_base64 = self.image_to_base64(screenshot_path)
            if not image_base64:
                return self.get_fallback_actions(command)
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ prefer
            system_prompt = """You are an expert browser automation AI for yupp.ai website. 

ANALYZE the screenshot carefully and create precise actions for the user's command.

AVAILABLE ACTIONS:
1. click - Click element (MUST provide exact [x, y] coordinates)
2. type - Type text into input field
3. key - Press key (Return, Tab, Delete, etc.)
4. navigate - Go to URL
5. wait - Wait specified seconds
6. scroll - Scroll page (up/down)

SPECIAL FOCUS FOR YUPP.AI:
- Input field: Usually in bottom center (around y=700-800)
- "I prefer this" buttons: Look for small buttons below AI responses
- AI responses appear in chat bubbles with preference buttons below
- Preference buttons are often labeled "I prefer this" or have thumbs up icons
- Look carefully for clickable elements near AI response text

RESPONSE FORMAT (valid JSON only):
{
    "actions": [
        {
            "action_type": "click",
            "coordinates": [x, y],
            "description": "Click on specific element"
        },
        {
            "action_type": "type",
            "value": "text to type",
            "description": "Type specific text"
        }
    ]
}

CRITICAL RULES:
- ALWAYS provide exact coordinates [x, y] for click actions
- For "prefer" commands: scan ENTIRE screen for preference buttons
- Look for buttons, links, or clickable text related to preferences
- If multiple options exist, choose the most visible one
- Be extra careful with preference button coordinates
- Return ONLY valid JSON, no explanations outside JSON"""

            messages = [
                {"role": "system", "content": system_prompt},
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": f"Command: '{command}'\n\nAnalyze this yupp.ai screenshot and create action plan with EXACT coordinates:"
                        },
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/png;base64,{image_base64}"}
                        }
                    ]
                }
            ]
            
            payload = {
                "model": self.model,
                "messages": messages,
                "max_tokens": 800,
                "temperature": 0.1
            }
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(self.api_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        content = result['choices'][0]['message']['content']
                        
                        self.log(f"AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)", "AI")
                        
                        # –ü–∞—Ä—Å–∏–º JSON
                        plan_data = self.parse_json_response(content)
                        if not plan_data:
                            return self.get_fallback_actions(command)
                        
                        # –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                        actions = []
                        for action_data in plan_data.get("actions", []):
                            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—è
                            if "duration" in action_data:
                                action_data["value"] = str(action_data["duration"])
                            
                            action = BrowserAction(
                                action_type=action_data.get("action_type"),
                                target=action_data.get("target"),
                                value=action_data.get("value"),
                                coordinates=tuple(action_data.get("coordinates", [])) if action_data.get("coordinates") else None,
                                description=action_data.get("description", "")
                            )
                            actions.append(action)
                        
                        self.log(f"–°–æ–∑–¥–∞–Ω–æ {len(actions)} –¥–µ–π—Å—Ç–≤–∏–π", "SUCCESS")
                        return actions
                    
                    else:
                        error_text = await response.text()
                        self.log(f"API –æ—à–∏–±–∫–∞ {response.status}: {error_text[:200]}", "ERROR")
                        return self.get_fallback_actions(command)
        
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", "ERROR")
            return self.get_fallback_actions(command)
    
    def get_fallback_actions(self, command: str) -> List[BrowserAction]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        actions = []
        cmd = command.lower()
        
        if '–æ—Ç–∫—Ä–æ–π' in cmd and 'yupp' in cmd:
            actions.append(BrowserAction(
                action_type="navigate",
                value="https://yupp.ai",
                description="–û—Ç–∫—Ä—ã—Ç—å yupp.ai"
            ))
        
        elif '–ø–æ–¥–æ–∂–¥–∏' in cmd:
            wait_time = 3
            numbers = re.findall(r'\d+', command)
            if numbers:
                wait_time = int(numbers[0])
            
            actions.append(BrowserAction(
                action_type="wait",
                value=str(wait_time),
                description=f"–ü–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥"
            ))
        
        elif '–Ω–∞–ø–∏—à–∏' in cmd or '–≤–≤–µ–¥–∏' in cmd:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            text_match = re.search(r"'([^']*)'|\"([^\"]*)\"", command)
            if text_match:
                text = text_match.group(1) or text_match.group(2)
                
                # –ö–ª–∏–∫–∞–µ–º –≤ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ (–ø–æ–ª–µ –≤–≤–æ–¥–∞ yupp.ai)
                actions.append(BrowserAction(
                    action_type="click",
                    coordinates=(640, 750),  # –ù–∏–∂–µ –¥–ª—è yupp.ai
                    description="–ö–ª–∏–∫ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞"
                ))
                
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                actions.append(BrowserAction(
                    action_type="key",
                    value="Command+A",
                    description="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ"
                ))
                
                # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
                actions.append(BrowserAction(
                    action_type="type",
                    value=text,
                    description=f"–í–≤–µ—Å—Ç–∏: {text}"
                ))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if '–æ—Ç–ø—Ä–∞–≤' in cmd or 'enter' in cmd:
                    actions.append(BrowserAction(
                        action_type="key",
                        value="Return",
                        description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    ))
        
        elif 'prefer' in cmd or '–∫–Ω–æ–ø–∫' in cmd:
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º –∫–Ω–æ–ø–∫–∏ prefer
            prefer_positions = [
                (200, 400),   # –õ–µ–≤–∞—è —á–∞—Å—Ç—å, —Å—Ä–µ–¥–Ω—è—è –≤—ã—Å–æ—Ç–∞
                (200, 500),   # –õ–µ–≤–∞—è —á–∞—Å—Ç—å, –Ω–∏–∂–µ
                (200, 600),   # –õ–µ–≤–∞—è —á–∞—Å—Ç—å, –µ—â–µ –Ω–∏–∂–µ
                (400, 400),   # –¶–µ–Ω—Ç—Ä –ª–µ–≤–µ–µ
                (400, 500),   # –¶–µ–Ω—Ç—Ä
                (400, 600),   # –¶–µ–Ω—Ç—Ä –Ω–∏–∂–µ
                (600, 400),   # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å
                (600, 500),   # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –Ω–∏–∂–µ
                (640, 400),   # –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
                (640, 500),   # –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞ –Ω–∏–∂–µ
                (800, 400),   # –î–∞–ª—å—à–µ –≤–ø—Ä–∞–≤–æ
                (800, 500),   # –î–∞–ª—å—à–µ –≤–ø—Ä–∞–≤–æ –Ω–∏–∂–µ
            ]
            
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
            actions.append(BrowserAction(
                action_type="click",
                coordinates=prefer_positions[0],
                description="–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É prefer (–ø–æ–ø—ã—Ç–∫–∞ 1)"
            ))
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "–Ω–∞–π–¥–∏", –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            if '–Ω–∞–π–¥–∏' in cmd:
                for i, pos in enumerate(prefer_positions[1:4]):  # –ï—â–µ 3 –ø–æ–ø—ã—Ç–∫–∏
                    actions.append(BrowserAction(
                        action_type="wait",
                        value="1",
                        description="–ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞"
                    ))
                    actions.append(BrowserAction(
                        action_type="click",
                        coordinates=pos,
                        description=f"–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É prefer (–ø–æ–ø—ã—Ç–∫–∞ {i+2})"
                    ))
        
        elif 'enter' in cmd:
            actions.append(BrowserAction(
                action_type="key",
                value="Return",
                description="–ù–∞–∂–∞—Ç—å Enter"
            ))
        
        return actions
    
    async def execute_action(self, action: BrowserAction) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            self.log(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {action.description}", "ACTION")
            
            if action.action_type == "click":
                return await self.click(action)
            elif action.action_type == "type":
                return await self.type_text(action)
            elif action.action_type == "key":
                return await self.press_key(action)
            elif action.action_type == "navigate":
                return await self.navigate(action)
            elif action.action_type == "wait":
                return await self.wait(action)
            elif action.action_type == "scroll":
                return await self.scroll(action)
            else:
                self.log(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action.action_type}", "WARNING")
                return False
                
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}", "ERROR")
            return False
    
    async def click(self, action: BrowserAction) -> bool:
        """–ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        if not action.coordinates:
            self.log("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã –¥–ª—è –∫–ª–∏–∫–∞", "WARNING")
            return False
        
        try:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
            subprocess.run(['osascript', '-e', '''
                tell application "SunBrowser" to activate
            '''])
            await asyncio.sleep(0.3)
            
            x, y = action.coordinates
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
            subprocess.run(['osascript', '-e', f'''
                tell application "System Events"
                    click at {{{x}, {y}}}
                end tell
            '''])
            
            self.log(f"–ö–ª–∏–∫ –ø–æ ({x}, {y})", "SUCCESS")
            await asyncio.sleep(0.5)
            return True
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}", "ERROR")
            return False
    
    async def type_text(self, action: BrowserAction) -> bool:
        """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
        if not action.value:
            self.log("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞", "WARNING")
            return False
        
        try:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            safe_text = action.value.replace('\\', '\\\\').replace('"', '\\"')
            
            subprocess.run(['osascript', '-e', f'''
                tell application "SunBrowser" to activate
                delay 0.2
                tell application "System Events"
                    keystroke "{safe_text}"
                end tell
            '''])
            
            self.log(f"–í–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç: {action.value[:50]}{'...' if len(action.value) > 50 else ''}", "SUCCESS")
            await asyncio.sleep(0.5)
            return True
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {e}", "ERROR")
            return False
    
    async def press_key(self, action: BrowserAction) -> bool:
        """–ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        key = action.value or "Return"
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π
            if "Command" in key and "A" in key:
                script = '''
                    tell application "SunBrowser" to activate
                    delay 0.2
                    tell application "System Events"
                        keystroke "a" using {command down}
                    end tell
                '''
            elif key in ["Return", "Enter"]:
                script = '''
                    tell application "SunBrowser" to activate
                    delay 0.2
                    tell application "System Events"
                        key code 36
                    end tell
                '''
            elif key == "Delete":
                script = '''
                    tell application "SunBrowser" to activate
                    delay 0.2
                    tell application "System Events"
                        key code 51
                    end tell
                '''
            else:
                script = f'''
                    tell application "SunBrowser" to activate
                    delay 0.2
                    tell application "System Events"
                        keystroke "{key.lower()}"
                    end tell
                '''
            
            subprocess.run(['osascript', '-e', script])
            self.log(f"–ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {key}", "SUCCESS")
            await asyncio.sleep(0.5)
            return True
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏: {e}", "ERROR")
            return False
    
    async def navigate(self, action: BrowserAction) -> bool:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ URL"""
        url = action.value or action.target
        if not url:
            return False
        
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        try:
            subprocess.run(['osascript', '-e', f'''
                tell application "SunBrowser"
                    activate
                end tell
                delay 0.5
                tell application "System Events"
                    keystroke "l" using {{command down}}
                    delay 0.3
                    keystroke "{url}"
                    delay 0.3
                    key code 36
                end tell
            '''])
            
            self.log(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}", "SUCCESS")
            await asyncio.sleep(3)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            return True
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    async def wait(self, action: BrowserAction) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ"""
        try:
            wait_time = int(action.value) if action.value else 3
            self.log(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
            return True
        except:
            await asyncio.sleep(3)
            return True
    
    async def scroll(self, action: BrowserAction) -> bool:
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        direction = action.value or "down"
        
        try:
            key_code = "125" if direction == "down" else "126"  # –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑/–≤–≤–µ—Ä—Ö
            
            subprocess.run(['osascript', '-e', f'''
                tell application "SunBrowser" to activate
                delay 0.2
                tell application "System Events"
                    key code {key_code}
                end tell
            '''])
            
            self.log(f"–ü—Ä–æ–∫—Ä—É—Ç–∫–∞: {direction}", "SUCCESS")
            await asyncio.sleep(0.5)
            return True
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {e}", "ERROR")
            return False
    
    async def execute_command(self, command: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        self.log(f"–ö–æ–º–∞–Ω–¥–∞: '{command}'", "INFO")
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_path = await self.take_screenshot()
        if not screenshot_path:
            return False
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º
            actions = await self.analyze_screen(command, screenshot_path)
            
            if not actions:
                self.log("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π", "ERROR")
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            success_count = 0
            for i, action in enumerate(actions):
                self.log(f"–î–µ–π—Å—Ç–≤–∏–µ {i+1}/{len(actions)}: {action.description}")
                
                if await self.execute_action(action):
                    success_count += 1
                    await asyncio.sleep(0.8)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                else:
                    self.log(f"–î–µ–π—Å—Ç–≤–∏–µ {i+1} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "WARNING")
            
            result = success_count > 0
            self.log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(actions)} –¥–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", 
                    "SUCCESS" if result else "ERROR")
            return result
            
        finally:
            # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            try:
                os.remove(screenshot_path)
            except:
                pass
    
    async def run_script(self, commands: List[str]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"""
        self.log(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ {len(commands)} –∫–æ–º–∞–Ω–¥")
        print("=" * 60)
        
        success_count = 0
        
        for i, command in enumerate(commands):
            self.log(f"–ö–æ–º–∞–Ω–¥–∞ {i+1}/{len(commands)}: '{command}'")
            
            if await self.execute_command(command):
                success_count += 1
                if i < len(commands) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
                    await asyncio.sleep(1.5)
            else:
                self.log(f"–ö–æ–º–∞–Ω–¥–∞ {i+1} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏", "WARNING")
        
        print("=" * 60)
        result = success_count == len(commands)
        self.log(f"–ò—Ç–æ–≥: {success_count}/{len(commands)} –∫–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", 
                "SUCCESS" if result else "WARNING")
        
        return result


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Yupp.ai")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        api_key = input("–í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á: ").strip()
        if not api_key:
            print("‚ùå API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        automation = YuppAutomation(api_key)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º
        print("\nüéØ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:")
        print("1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π (–∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π)")
        print("2. –°–∫—Ä–∏–ø—Ç (–Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥)")
        
        mode = input("–í—ã–±–æ—Ä (1/2): ").strip()
        
        if mode == "1":
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            print("\nüí° –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:")
            print("   - '–û—Ç–∫—Ä–æ–π yupp.ai'")
            print("   - '–ù–∞–ø–∏—à–∏ Hello –∏ –æ—Ç–ø—Ä–∞–≤—å'")
            print("   - '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É I prefer this'")
            print("   - '–ü–æ–¥–æ–∂–¥–∏ 5 —Å–µ–∫—É–Ω–¥'")
            print("üí° –î–ª—è –≤—ã—Ö–æ–¥–∞: 'exit'")
            print("-" * 50)
            
            while True:
                try:
                    command = input("\nü§ñ –ö–æ–º–∞–Ω–¥–∞: ").strip()
                    
                    if command.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                        break
                    
                    if not command:
                        continue
                    
                    await automation.execute_command(command)
                    
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    automation.log(f"–û—à–∏–±–∫–∞: {e}", "ERROR")
        
        elif mode == "2":
            # –†–µ–∂–∏–º —Å–∫—Ä–∏–ø—Ç–∞
            yupp_commands = [
                "–û—Ç–∫—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—É yupp.ai",
                "–ü–æ–¥–æ–∂–¥–∏ 4 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è",
                "–ù–∞–ø–∏—à–∏ '–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?' –∏ –æ—Ç–ø—Ä–∞–≤—å",
                "–ù–∞–∂–º–∏ Enter —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "–ü–æ–¥–æ–∂–¥–∏ 22 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ AI –æ—Ç–≤–µ—Ç–∏—Ç",
                "–ù–∞–π–¥–∏ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'I prefer this'",
                "–ü–æ–¥–æ–∂–¥–∏ 22 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞",
                "–°–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'I prefer this'"
            ]
            
            print(f"\nüìù –ì–æ—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç ({len(yupp_commands)} –∫–æ–º–∞–Ω–¥):")
            for i, cmd in enumerate(yupp_commands):
                print(f"   {i+1}. {cmd}")
            
            use_default = input("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç? (Y/n): ").lower().strip()
            
            if use_default != 'n':
                commands = yupp_commands
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç
                commands = []
                print("\nüìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
                i = 1
                while True:
                    cmd = input(f"–ö–æ–º–∞–Ω–¥–∞ {i}: ").strip()
                    if not cmd:
                        break
                    commands.append(cmd)
                    i += 1
            
            if commands:
                await automation.run_script(commands)
            else:
                print("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –Ω–µ –≤–≤–µ–¥–µ–Ω—ã")
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("pip install openai pillow aiohttp")
import pyautogui
import time
import subprocess
import psutil
import platform
import os
from typing import Optional, Dict, List, Tuple

class BrowserAutomation:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    def __init__(self, config: Dict = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        
        Args:
            config: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        """
        # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.default_config = {
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            "browser": {
                "process_names": ["sunbrowser"],
                "window_titles": ["sunbrowser"]
            },
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Ä–∞–Ω–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            "screen": {
                "margin_from_edges": 50,
                "click_duration": 0.5,
                "move_duration": 0.3,
                "step_delay": 2
            },
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            "search": {
                "confidence_levels": [0.9, 0.8, 0.7, 0.6, 0.5],
                "timeout": 30,
                "retry_delay": 1
            },
            
            # –®–∞–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π)
            "steps": [
                {
                    "name": "find_browser",
                    "type": "browser_detection",
                    "description": "–ü–æ–∏—Å–∫ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"
                },
                {
                    "name": "click_signin_button", 
                    "type": "screenshot_click",
                    "screenshot_path": "screenshots/ypp/btn1.png",
                    "fallback_coords": {"x_ratio": 0.5, "y_ratio": 0.75},
                    "description": "–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞"
                },
                {
                    "name": "click_account",
                    "type": "coordinate_click", 
                    "coords": {"x_ratio": 0.75, "y_ratio": 0.5},
                    "description": "–ö–ª–∏–∫ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É"
                }
            ]
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π
        self.config = self._merge_configs(self.default_config, config or {})
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pyautogui
        self.original_failsafe = pyautogui.FAILSAFE
        pyautogui.FAILSAFE = False
    
    def _merge_configs(self, default: Dict, custom: Dict) -> Dict:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        result = default.copy()
        for key, value in custom.items():
            if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                result[key] = self._merge_configs(result[key], value)
            else:
                result[key] = value
        return result
    
    def log(self, message: str, level: str = "INFO"):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        icons = {"INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "WARNING": "‚ö†Ô∏è", "ERROR": "‚ùå", "DEBUG": "üîç"}
        print(f"{icons.get(level, '‚ÑπÔ∏è')} {message}")
    
    def get_screen_info(self) -> Tuple[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Ä–∞–Ω–µ"""
        width, height = pyautogui.size()
        self.log(f"–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {width}x{height}", "DEBUG")
        return width, height
    
    def coords_from_ratio(self, x_ratio: float, y_ratio: float) -> Tuple[int, int]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ"""
        screen_width, screen_height = self.get_screen_info()
        x = int(screen_width * x_ratio)
        y = int(screen_height * y_ratio)
        return x, y
    
    def is_coords_safe(self, x: int, y: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        screen_width, screen_height = self.get_screen_info()
        margin = self.config["screen"]["margin_from_edges"]
        
        return (margin <= x <= screen_width - margin and 
                margin <= y <= screen_height - margin)
    
    def safe_click(self, x: int, y: int) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        try:
            if not self.is_coords_safe(x, y):
                self.log(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({x}, {y}) –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º...", "WARNING")
                screen_width, screen_height = self.get_screen_info()
                margin = self.config["screen"]["margin_from_edges"]
                x = max(margin, min(x, screen_width - margin))
                y = max(margin, min(y, screen_height - margin))
                self.log(f"–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x}, {y})", "DEBUG")
            
            # –ü–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏ –∫–ª–∏–∫
            move_duration = self.config["screen"]["move_duration"]
            click_duration = self.config["screen"]["click_duration"]
            
            pyautogui.moveTo(x, y, duration=move_duration)
            time.sleep(0.2)
            pyautogui.click(x, y)
            
            current_pos = pyautogui.position()
            self.log(f"–ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ ({x}, {y}), —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {current_pos}", "SUCCESS")
            return True
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ: {e}", "ERROR")
            return False
    
    def find_browser_window(self) -> Optional[Dict]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.log("–ü–æ–∏—Å–∫ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ AppleScript (–¥–ª—è macOS)
            applescript = '''
            tell application "System Events"
                set appList to (name of every application process whose background only is false)
            end tell
            return appList
            '''
            result = subprocess.run(['osascript', '-e', applescript], capture_output=True, text=True)
            
            if result.returncode == 0:
                apps = result.stdout.strip().split(', ')
                self.log(f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {apps}", "DEBUG")
                
                # –ò—â–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏–º–µ–Ω–∞–º
                browser_names = self.config["browser"]["process_names"]
                found_browsers = []
                
                for app in apps:
                    for browser_name in browser_names:
                        if browser_name.lower() in app.lower():
                            found_browsers.append(app)
                            break
                
                if found_browsers:
                    self.log(f"–ù–∞–π–¥–µ–Ω—ã –±—Ä–∞—É–∑–µ—Ä—ã: {found_browsers}", "SUCCESS")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
                    return {
                        'title': found_browsers[0],
                        'app_name': found_browsers[0],
                        'found': True
                    }
            
            self.log("–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            return None
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}", "ERROR")
            return None
    
    def activate_browser_window(self, window_info: Dict) -> bool:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            app_name = window_info['app_name']
            self.log(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫–Ω–∞: {app_name}")
            
            activate_script = f'''
            tell application "System Events"
                tell process "{app_name}"
                    set frontmost to true
                    if (count of windows) > 0 then
                        tell window 1
                            set index to 1
                        end tell
                    end if
                end tell
            end tell
            '''
            
            result = subprocess.run(['osascript', '-e', activate_script], capture_output=True, text=True)
            
            if result.returncode == 0:
                time.sleep(1)
                self.log(f"–û–∫–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {app_name}", "SUCCESS")
                return True
            else:
                self.log(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {result.stderr}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫–Ω–∞: {e}", "ERROR")
            return False
    
    def click_by_coordinates(self, coords: Dict) -> bool:
        """–ö–ª–∏–∫ –ø–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        if "x_ratio" in coords and "y_ratio" in coords:
            x, y = self.coords_from_ratio(coords["x_ratio"], coords["y_ratio"])
        else:
            x, y = coords.get("x", 0), coords.get("y", 0)
        
        self.log(f"–ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ({x}, {y})")
        return self.safe_click(x, y)
    
    def find_element_by_text(self, text: str, confidence: float = 0.8) -> Optional[Tuple[int, int]]:
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        try:
            import pytesseract
            from PIL import Image
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
            screenshot = pyautogui.screenshot()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            ocr_data = pytesseract.image_to_data(screenshot, output_type=pytesseract.Output.DICT)
            
            # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
            screen_width, screen_height = self.get_screen_info()
            center_matches = []
            
            for i, detected_text in enumerate(ocr_data['text']):
                if (text.lower() in detected_text.lower() and 
                    int(ocr_data['conf'][i]) > confidence * 100):
                    
                    x = ocr_data['left'][i] + ocr_data['width'][i] // 2
                    y = ocr_data['top'][i] + ocr_data['height'][i] // 2
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                    if (screen_width * 0.2 <= x <= screen_width * 0.8 and
                        screen_height * 0.3 <= y <= screen_height * 0.8):
                        center_matches.append((x, y))
                        self.log(f"–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç '{text}' –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ({x}, {y})", "DEBUG")
            
            if center_matches:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                center_x, center_y = screen_width // 2, screen_height // 2
                best_match = min(center_matches, 
                               key=lambda p: abs(p[0] - center_x) + abs(p[1] - center_y))
                self.log(f"–í—ã–±—Ä–∞–Ω –Ω–∞–∏–±–æ–ª–µ–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {best_match}", "SUCCESS")
                return best_match
            
            return None
            
        except ImportError:
            self.log("–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install pytesseract", "WARNING")
            return None
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {e}", "ERROR")
            return None
    
    def find_google_button_smart(self) -> Optional[Tuple[int, int]]:
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ Google –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º"""
        self.log("–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ Google...")
        
        # 1. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É (—Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
        text_variations = [
            "Sign in with Google",
            "Continue with Google", 
            "Login with Google"
        ]
        
        for text in text_variations:
            coords = self.find_element_by_text(text, confidence=0.9)
            if coords:
                self.log(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É '{text}'", "SUCCESS")
                return coords
        
        # 2. Fallback: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
        screen_width, screen_height = self.get_screen_info()
        fallback_x = screen_width // 2
        fallback_y = int(screen_height * 0.75)  # –ö–Ω–æ–ø–∫–∞ –æ–±—ã—á–Ω–æ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏
        
        self.log(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ Google: ({fallback_x}, {fallback_y})", "INFO")
        return (fallback_x, fallback_y)
    
    def wait_for_page_change(self, timeout: int = 10) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.log(f"–û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({timeout}—Å)...")
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–æ
        screenshot_before = pyautogui.screenshot()
        
        for i in range(timeout):
            time.sleep(1)
            screenshot_after = pyautogui.screenshot()
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (–ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–∞–Ω–Ω—ã—Ö)
            if screenshot_before.tobytes() != screenshot_after.tobytes():
                self.log(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —á–µ—Ä–µ–∑ {i+1}—Å", "SUCCESS")
                return True
            
            if i % 2 == 0:  # –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                self.log(f"–û–∂–∏–¥–∞–Ω–∏–µ... {i+1}/{timeout}—Å", "DEBUG")
        
        self.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", "WARNING")
        return False
    
    def find_email_account_smart(self) -> Optional[Tuple[int, int]]:
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã"""
        self.log("–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã...")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.wait_for_page_change(timeout=5)
        
        # 1. –ü–æ–∏—Å–∫ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–∞–º –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        account_patterns = [
            "@gmail.com",
            "gmail.com",
            "Choose an account",
            "boban marjan",
            "marjanboban01"
        ]
        
        for pattern in account_patterns:
            coords = self.find_element_by_text(pattern, confidence=0.8)
            if coords:
                self.log(f"–ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–∫—Å—Ç—É '{pattern}'", "SUCCESS")
                return coords
        
        # 2. –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        screen_width, screen_height = self.get_screen_info()
        
        # –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –ø—Ä–∞–≤–µ–µ –Ω–∞ 30px, –Ω–∏–∂–µ –Ω–∞ 20px
        base_x = int(screen_width * 0.5) + 30  # –¶–µ–Ω—Ç—Ä + 30px –ø—Ä–∞–≤–µ–µ
        base_y = int(screen_height * 0.4) + 20  # 40% –≤—ã—Å–æ—Ç—ã + 20px –Ω–∏–∂–µ
        
        # –ò—â–µ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        search_areas = [
            (base_x, base_y),                    # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
            (base_x + 20, base_y),              # –ï—â–µ –ø—Ä–∞–≤–µ–µ
            (base_x, base_y + 15),              # –ï—â–µ –Ω–∏–∂–µ
            (base_x + 40, base_y + 10),         # –ü—Ä–∞–≤–µ–µ –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ
        ]
        
        for x, y in search_areas:
            self.log(f"–ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: ({x}, {y})", "INFO")
            return (x, y)
        
        return None
    
    def find_continue_button_smart(self) -> Optional[Tuple[int, int]]:
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
        self.log("–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
        
        # 1. –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        continue_texts = [
            "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏",
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
            "Continue",
            "–î–∞–ª—ñ",
            "Next"
        ]
        
        for text in continue_texts:
            coords = self.find_element_by_text(text, confidence=0.8)
            if coords:
                self.log(f"–ö–Ω–æ–ø–∫–∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É '{text}'", "SUCCESS")
                return coords
        
        # 2. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∑–æ–Ω—ã —ç–∫—Ä–∞–Ω–∞
        screen_width, screen_height = self.get_screen_info()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π –∫–≤–∞–¥—Ä–∞–Ω—Ç)
        search_zones = [
            # –ó–æ–Ω–∞ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Continue
            {
                "x_ratio": 0.78,   # 78% —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
                "y_ratio": 0.80,   # 80% –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
                "name": "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è"
            },
            # –ó–æ–Ω–∞ 2: –ù–µ–º–Ω–æ–≥–æ –ª–µ–≤–µ–µ (–ø–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç 1119 –∏–∑ 1440)
            {
                "x_ratio": 0.777,  # 1119/1440 ‚âà 0.777
                "y_ratio": 0.802,  # 722/900 ‚âà 0.802
                "name": "—Ç–æ—á–Ω–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è"
            },
            # –ó–æ–Ω–∞ 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            {
                "x_ratio": 0.75,
                "y_ratio": 0.85,
                "name": "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è"
            },
            # –ó–æ–Ω–∞ 4: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ-–ø—Ä–∞–≤–∞—è
            {
                "x_ratio": 0.8,
                "y_ratio": 0.75,
                "name": "—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ-–ø—Ä–∞–≤–∞—è"
            }
        ]
        
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é –∑–æ–Ω—É
        for zone in search_zones:
            x = int(screen_width * zone["x_ratio"])
            y = int(screen_height * zone["y_ratio"])
            
            self.log(f"–ü—Ä–æ–±—É–µ–º –∑–æ–Ω—É '{zone['name']}': ({x}, {y})", "DEBUG")
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–≤–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—è –∏–ª–∏ –¥—Ä—É–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
            if self.is_coords_safe(x, y):
                self.log(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∑–æ–Ω—ã '{zone['name']}': ({x}, {y})", "INFO")
                return (x, y)
        
        # 3. Fallback: —Ä–∞—Å—á–µ—Ç –æ—Ç –∫—Ä–∞–µ–≤ —ç–∫—Ä–∞–Ω–∞
        margin_from_right = 100  # 100px –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
        margin_from_bottom = 80  # 80px –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è
        
        fallback_x = screen_width - margin_from_right
        fallback_y = screen_height - margin_from_bottom
        
    def find_button_with_ai_vision(self, button_description: str = "Continue button") -> Optional[Tuple[int, int]]:
        """–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–º–æ—â—å—é AI Vision (DeepSeek)"""
        try:
            import base64
            import requests
            from io import BytesIO
            
            self.log(f"AI Vision –ø–æ–∏—Å–∫: {button_description}")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = pyautogui.screenshot()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            buffer = BytesIO()
            screenshot.save(buffer, format='PNG')
            img_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
            
            # –ó–∞–ø—Ä–æ—Å –∫ DeepSeek API
            api_key = "sk-2f6aad2a5d76478c9f4c70b48d0b2efd"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
            
            payload = {
                "model": "deepseek-chat",
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": f"""–ù–∞–π–¥–∏ –Ω–∞ —ç—Ç–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –∫–Ω–æ–ø–∫—É: {button_description}
                                
                                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–π–¥–∏ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "Continue", "–î–∞–ª—ñ" –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–º.
                                
                                –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: x,y
                                –ì–¥–µ x,y - —ç—Ç–æ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–Ω–æ–ø–∫–∏.
                                
                                –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–Ω–∏: NOT_FOUND"""
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{img_base64}"
                                }
                            }
                        ]
                    }
                ],
                "temperature": 0.1,
                "max_tokens": 50
            }
            
            headers = {
                "Authorization": f"Bearer {api_key}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(
                "https://api.deepseek.com/v1/chat/completions",
                json=payload,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                ai_response = result['choices'][0]['message']['content'].strip()
                
                self.log(f"AI –æ—Ç–≤–µ—Ç: {ai_response}", "DEBUG")
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                if "NOT_FOUND" not in ai_response and "," in ai_response:
                    try:
                        coords = ai_response.replace(" ", "").split(",")
                        x, y = int(coords[0]), int(coords[1])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                        screen_width, screen_height = self.get_screen_info()
                        if 0 <= x <= screen_width and 0 <= y <= screen_height:
                            self.log(f"‚úÖ AI –Ω–∞—à–µ–ª –∫–Ω–æ–ø–∫—É: ({x}, {y})", "SUCCESS")
                            return (x, y)
                        else:
                            self.log(f"‚ö†Ô∏è AI –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ —ç–∫—Ä–∞–Ω–∞: ({x}, {y})", "WARNING")
                    except ValueError:
                        self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {ai_response}", "ERROR")
                
            return None
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ AI Vision: {e}", "ERROR")
            return None
    
    def find_continue_button_ai_enhanced(self) -> Optional[Tuple[int, int]]:
        """AI-—É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
        self.log("ü§ñ AI-—É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
        
        # –ú–µ—Ç–æ–¥ 1: AI Vision (DeepSeek)
        coords = self.find_button_with_ai_vision("Continue/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å button in bottom right area")
        if coords:
            return coords
        
        # –ú–µ—Ç–æ–¥ 2: OCR + AI –∞–Ω–∞–ª–∏–∑
        coords = self.find_button_with_smart_ai_ocr()
        if coords:
            return coords
        
        # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –º–µ—Ç–æ–¥—É
        self.log("AI –Ω–µ –Ω–∞—à–µ–ª –∫–Ω–æ–ø–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫", "WARNING")
        return self.find_continue_button_smart()
    
    def find_button_with_smart_ai_ocr(self) -> Optional[Tuple[int, int]]:
        """–£–º–Ω—ã–π OCR + AI –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫"""
        try:
            import pytesseract
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = pyautogui.screenshot()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            ocr_data = pytesseract.image_to_data(screenshot, output_type=pytesseract.Output.DICT)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            found_texts = []
            for i, text in enumerate(ocr_data['text']):
                if text.strip() and int(ocr_data['conf'][i]) > 50:
                    x = ocr_data['left'][i] + ocr_data['width'][i] // 2
                    y = ocr_data['top'][i] + ocr_data['height'][i] // 2
                    found_texts.append(f"{text}:{x},{y}")
            
            if found_texts:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
                ai_analysis = self.analyze_texts_with_ai(found_texts)
                if ai_analysis:
                    return ai_analysis
            
            return None
            
        except ImportError:
            self.log("–î–ª—è smart OCR –Ω—É–∂–Ω–æ: pip install pytesseract", "WARNING")
            return None
    
    def analyze_texts_with_ai(self, texts: List[str]) -> Optional[Tuple[int, int]]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI"""
        try:
            import requests
            
            api_key = "YOUR_DEEPSEEK_API_KEY"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
            
            texts_str = "\n".join(texts[:20])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            
            payload = {
                "model": "deepseek-chat",
                "messages": [
                    {
                        "role": "user",
                        "content": f"""–ò–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–∞–π–¥–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"/"Continue"/"–î–∞–ª—ñ":

{texts_str}

–§–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç:x,y

–ù–∞–π–¥–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –æ–∑–Ω–∞—á–∞–µ—Ç "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏–ª–∏ "continue" –∏ –≤–µ—Ä–Ω–∏ –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: x,y
–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω–∏: NOT_FOUND"""
                    }
                ],
                "temperature": 0.1,
                "max_tokens": 30
            }
            
            headers = {
                "Authorization": f"Bearer {api_key}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(
                "https://api.deepseek.com/v1/chat/completions",
                json=payload,
                headers=headers,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                ai_response = result['choices'][0]['message']['content'].strip()
                
                if "NOT_FOUND" not in ai_response and "," in ai_response:
                    coords = ai_response.replace(" ", "").split(",")
                    x, y = int(coords[0]), int(coords[1])
                    self.log(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ OCR –Ω–∞—à–µ–ª: ({x}, {y})", "SUCCESS")
                    return (x, y)
            
            return None
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}", "ERROR")
            return None
    
    def click_by_screenshot(self, screenshot_path: str, fallback_coords: Dict = None) -> bool:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–∫ –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É —Å fallback"""
        self.log(f"–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É: {screenshot_path}")
        
        if not os.path.exists(screenshot_path):
            self.log(f"–§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {screenshot_path}", "WARNING")
            if fallback_coords:
                return self.click_by_coordinates(fallback_coords)
            return False
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞—Ç—å
        max_attempts = 3
        confidence_levels = [0.8, 0.6, 0.4]
        
        for attempt in range(max_attempts):
            for confidence in confidence_levels:
                try:
                    location = pyautogui.locateCenterOnScreen(screenshot_path, confidence=confidence)
                    
                    if location:
                        self.log(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {location} (confidence={confidence})", "SUCCESS")
                        
                        if self.is_coords_safe(int(location.x), int(location.y)):
                            return self.safe_click(int(location.x), int(location.y))
                        else:
                            self.log(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã: {location}", "WARNING")
                
                except pyautogui.ImageNotFoundException:
                    continue
                except Exception as e:
                    self.log(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ (confidence={confidence}): {e}", "DEBUG")
                    continue
            
            time.sleep(0.5)  # –£–º–µ–Ω—å—à–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É
        
        self.log("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–º–Ω–æ–º—É –ø–æ–∏—Å–∫—É", "WARNING")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if fallback_coords:
            self.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", "INFO")
            return self.click_by_coordinates(fallback_coords)
        
        return False
    
    def execute_step(self, step: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        step_name = step.get("name", "unknown")
        step_type = step.get("type", "unknown")
        description = step.get("description", step_name)
        
        self.log(f"=== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: {description} ===")
        
        if step_type == "browser_detection":
            window_info = self.find_browser_window()
            if window_info:
                return self.activate_browser_window(window_info)
            return False
            
        elif step_type == "screenshot_click":
            screenshot_path = step.get("screenshot_path")
            fallback_coords = step.get("fallback_coords")
            return self.click_by_screenshot(screenshot_path, fallback_coords)
            
        elif step_type == "smart_google_click":
            coords = self.find_google_button_smart()
            if coords:
                return self.safe_click(coords[0], coords[1])
            return False
            
        elif step_type == "smart_email_click":
            coords = self.find_email_account_smart()
            if coords:
                return self.safe_click(coords[0], coords[1])
            return False
            
        elif step_type == "smart_continue_click":
            coords = self.find_continue_button_ai_enhanced()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –≤–µ—Ä—Å–∏—é
            if coords:
                return self.safe_click(coords[0], coords[1])
            return False
            
        elif step_type == "wait_for_load":
            seconds = step.get("seconds", 3)
            self.log(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ {seconds} —Å–µ–∫—É–Ω–¥")
            time.sleep(seconds)
            return True
            
        elif step_type == "coordinate_click":
            coords = step.get("coords", {})
            return self.click_by_coordinates(coords)
            
        elif step_type == "delay":
            delay = step.get("seconds", 1)
            self.log(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥")
            time.sleep(delay)
            return True
            
        else:
            self.log(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —à–∞–≥–∞: {step_type}", "ERROR")
            return False
    
    def run_automation(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        
        try:
            steps = self.config.get("steps", [])
            step_delay = self.config["screen"]["step_delay"]
            
            for i, step in enumerate(steps):
                self.log(f"–®–∞–≥ {i+1}/{len(steps)}")
                
                if not self.execute_step(step):
                    self.log(f"–®–∞–≥ {i+1} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω", "ERROR")
                    return False
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < len(steps) - 1:
                    time.sleep(step_delay)
            
            self.log("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", "SUCCESS")
            return True
            
        except Exception as e:
            self.log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
            return False
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FAILSAFE
            pyautogui.FAILSAFE = self.original_failsafe

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    custom_config = {
        "screen": {
            "step_delay": 3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
        },
        "steps": [
            {
                "name": "find_browser",
                "type": "browser_detection", 
                "description": "–ü–æ–∏—Å–∫ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è SunBrowser"
            },
            {
                "name": "click_google_signin",
                "type": "smart_google_click",
                "description": "–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Google"
            },
            {
                "name": "wait_for_google_page",
                "type": "wait_for_load",
                "seconds": 4,
                "description": "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"
            },
            {
                "name": "click_email_account", 
                "type": "smart_email_click",
                "description": "–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É email"
            },
            {
                "name": "wait_for_permissions_page",
                "type": "wait_for_load",
                "seconds": 3,
                "description": "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"
            },
            {
                "name": "click_continue_button",
                "type": "smart_continue_click", 
                "description": "–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            }
        ]
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    automation = BrowserAutomation(custom_config)
    automation.run_automation()